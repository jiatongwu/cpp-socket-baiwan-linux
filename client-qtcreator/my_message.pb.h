// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: my_message.proto

#ifndef PROTOBUF_INCLUDED_my_5fmessage_2eproto
#define PROTOBUF_INCLUDED_my_5fmessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_my_5fmessage_2eproto 

namespace protobuf_my_5fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_my_5fmessage_2eproto
namespace tutorial {
class Close;
class CloseDefaultTypeInternal;
extern CloseDefaultTypeInternal _Close_default_instance_;
class Data;
class DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Open;
class OpenDefaultTypeInternal;
extern OpenDefaultTypeInternal _Open_default_instance_;
}  // namespace tutorial
namespace google {
namespace protobuf {
template<> ::tutorial::Close* Arena::CreateMaybeMessage<::tutorial::Close>(Arena*);
template<> ::tutorial::Data* Arena::CreateMaybeMessage<::tutorial::Data>(Arena*);
template<> ::tutorial::Open* Arena::CreateMaybeMessage<::tutorial::Open>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace tutorial {

enum Data_DataType {
  Data_DataType_OPEN = 0,
  Data_DataType_CLOSE = 1
};
bool Data_DataType_IsValid(int value);
const Data_DataType Data_DataType_DataType_MIN = Data_DataType_OPEN;
const Data_DataType Data_DataType_DataType_MAX = Data_DataType_CLOSE;
const int Data_DataType_DataType_ARRAYSIZE = Data_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Data_DataType_descriptor();
inline const ::std::string& Data_DataType_Name(Data_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Data_DataType_descriptor(), value);
}
inline bool Data_DataType_Parse(
    const ::std::string& name, Data_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Data_DataType>(
    Data_DataType_descriptor(), name, value);
}
// ===================================================================

class Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Data) */ {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  enum DataBodyCase {
    kOpenData = 2,
    kCloseData = 3,
    DATABODY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Data* other);
  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Data* New() const final {
    return CreateMaybeMessage<Data>(NULL);
  }

  Data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Data_DataType DataType;
  static const DataType OPEN =
    Data_DataType_OPEN;
  static const DataType CLOSE =
    Data_DataType_CLOSE;
  static inline bool DataType_IsValid(int value) {
    return Data_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    Data_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    Data_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    Data_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return Data_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return Data_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return Data_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .tutorial.Data.DataType data_type = 1;
  bool has_data_type() const;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  ::tutorial::Data_DataType data_type() const;
  void set_data_type(::tutorial::Data_DataType value);

  // optional .tutorial.Open openData = 2;
  bool has_opendata() const;
  void clear_opendata();
  static const int kOpenDataFieldNumber = 2;
  private:
  const ::tutorial::Open& _internal_opendata() const;
  public:
  const ::tutorial::Open& opendata() const;
  ::tutorial::Open* release_opendata();
  ::tutorial::Open* mutable_opendata();
  void set_allocated_opendata(::tutorial::Open* opendata);

  // optional .tutorial.Close closeData = 3;
  bool has_closedata() const;
  void clear_closedata();
  static const int kCloseDataFieldNumber = 3;
  private:
  const ::tutorial::Close& _internal_closedata() const;
  public:
  const ::tutorial::Close& closedata() const;
  ::tutorial::Close* release_closedata();
  ::tutorial::Close* mutable_closedata();
  void set_allocated_closedata(::tutorial::Close* closedata);

  void clear_dataBody();
  DataBodyCase dataBody_case() const;
  // @@protoc_insertion_point(class_scope:tutorial.Data)
 private:
  void set_has_data_type();
  void clear_has_data_type();
  void set_has_opendata();
  void set_has_closedata();

  inline bool has_dataBody() const;
  inline void clear_has_dataBody();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int data_type_;
  union DataBodyUnion {
    DataBodyUnion() {}
    ::tutorial::Open* opendata_;
    ::tutorial::Close* closedata_;
  } dataBody_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_my_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Open : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Open) */ {
 public:
  Open();
  virtual ~Open();

  Open(const Open& from);

  inline Open& operator=(const Open& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Open(Open&& from) noexcept
    : Open() {
    *this = ::std::move(from);
  }

  inline Open& operator=(Open&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Open& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Open* internal_default_instance() {
    return reinterpret_cast<const Open*>(
               &_Open_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Open* other);
  friend void swap(Open& a, Open& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Open* New() const final {
    return CreateMaybeMessage<Open>(NULL);
  }

  Open* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Open>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Open& from);
  void MergeFrom(const Open& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Open* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string email = 2;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 2;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // @@protoc_insertion_point(class_scope:tutorial.Open)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_email();
  void clear_has_email();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  friend struct ::protobuf_my_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Close : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tutorial.Close) */ {
 public:
  Close();
  virtual ~Close();

  Close(const Close& from);

  inline Close& operator=(const Close& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Close(Close&& from) noexcept
    : Close() {
    *this = ::std::move(from);
  }

  inline Close& operator=(Close&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Close& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Close* internal_default_instance() {
    return reinterpret_cast<const Close*>(
               &_Close_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Close* other);
  friend void swap(Close& a, Close& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Close* New() const final {
    return CreateMaybeMessage<Close>(NULL);
  }

  Close* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Close>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Close& from);
  void MergeFrom(const Close& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Close* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string number = 1;
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  #if LANG_CXX11
  void set_number(::std::string&& value);
  #endif
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // @@protoc_insertion_point(class_scope:tutorial.Close)
 private:
  void set_has_number();
  void clear_has_number();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  friend struct ::protobuf_my_5fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Data

// required .tutorial.Data.DataType data_type = 1;
inline bool Data::has_data_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_data_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_data_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_data_type() {
  data_type_ = 0;
  clear_has_data_type();
}
inline ::tutorial::Data_DataType Data::data_type() const {
  // @@protoc_insertion_point(field_get:tutorial.Data.data_type)
  return static_cast< ::tutorial::Data_DataType >(data_type_);
}
inline void Data::set_data_type(::tutorial::Data_DataType value) {
  assert(::tutorial::Data_DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Data.data_type)
}

// optional .tutorial.Open openData = 2;
inline bool Data::has_opendata() const {
  return dataBody_case() == kOpenData;
}
inline void Data::set_has_opendata() {
  _oneof_case_[0] = kOpenData;
}
inline void Data::clear_opendata() {
  if (has_opendata()) {
    delete dataBody_.opendata_;
    clear_has_dataBody();
  }
}
inline const ::tutorial::Open& Data::_internal_opendata() const {
  return *dataBody_.opendata_;
}
inline ::tutorial::Open* Data::release_opendata() {
  // @@protoc_insertion_point(field_release:tutorial.Data.openData)
  if (has_opendata()) {
    clear_has_dataBody();
      ::tutorial::Open* temp = dataBody_.opendata_;
    dataBody_.opendata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::tutorial::Open& Data::opendata() const {
  // @@protoc_insertion_point(field_get:tutorial.Data.openData)
  return has_opendata()
      ? *dataBody_.opendata_
      : *reinterpret_cast< ::tutorial::Open*>(&::tutorial::_Open_default_instance_);
}
inline ::tutorial::Open* Data::mutable_opendata() {
  if (!has_opendata()) {
    clear_dataBody();
    set_has_opendata();
    dataBody_.opendata_ = CreateMaybeMessage< ::tutorial::Open >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Data.openData)
  return dataBody_.opendata_;
}

// optional .tutorial.Close closeData = 3;
inline bool Data::has_closedata() const {
  return dataBody_case() == kCloseData;
}
inline void Data::set_has_closedata() {
  _oneof_case_[0] = kCloseData;
}
inline void Data::clear_closedata() {
  if (has_closedata()) {
    delete dataBody_.closedata_;
    clear_has_dataBody();
  }
}
inline const ::tutorial::Close& Data::_internal_closedata() const {
  return *dataBody_.closedata_;
}
inline ::tutorial::Close* Data::release_closedata() {
  // @@protoc_insertion_point(field_release:tutorial.Data.closeData)
  if (has_closedata()) {
    clear_has_dataBody();
      ::tutorial::Close* temp = dataBody_.closedata_;
    dataBody_.closedata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::tutorial::Close& Data::closedata() const {
  // @@protoc_insertion_point(field_get:tutorial.Data.closeData)
  return has_closedata()
      ? *dataBody_.closedata_
      : *reinterpret_cast< ::tutorial::Close*>(&::tutorial::_Close_default_instance_);
}
inline ::tutorial::Close* Data::mutable_closedata() {
  if (!has_closedata()) {
    clear_dataBody();
    set_has_closedata();
    dataBody_.closedata_ = CreateMaybeMessage< ::tutorial::Close >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tutorial.Data.closeData)
  return dataBody_.closedata_;
}

inline bool Data::has_dataBody() const {
  return dataBody_case() != DATABODY_NOT_SET;
}
inline void Data::clear_has_dataBody() {
  _oneof_case_[0] = DATABODY_NOT_SET;
}
inline Data::DataBodyCase Data::dataBody_case() const {
  return Data::DataBodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Open

// optional string name = 1;
inline bool Open::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Open::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Open::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Open::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Open::name() const {
  // @@protoc_insertion_point(field_get:tutorial.Open.name)
  return name_.GetNoArena();
}
inline void Open::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Open.name)
}
#if LANG_CXX11
inline void Open::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Open.name)
}
#endif
inline void Open::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Open.name)
}
inline void Open::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Open.name)
}
inline ::std::string* Open::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tutorial.Open.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Open::release_name() {
  // @@protoc_insertion_point(field_release:tutorial.Open.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Open::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Open.name)
}

// optional string email = 2;
inline bool Open::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Open::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Open::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Open::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& Open::email() const {
  // @@protoc_insertion_point(field_get:tutorial.Open.email)
  return email_.GetNoArena();
}
inline void Open::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Open.email)
}
#if LANG_CXX11
inline void Open::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Open.email)
}
#endif
inline void Open::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Open.email)
}
inline void Open::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Open.email)
}
inline ::std::string* Open::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:tutorial.Open.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Open::release_email() {
  // @@protoc_insertion_point(field_release:tutorial.Open.email)
  if (!has_email()) {
    return NULL;
  }
  clear_has_email();
  return email_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Open::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Open.email)
}

// -------------------------------------------------------------------

// Close

// optional string number = 1;
inline bool Close::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Close::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Close::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Close::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_number();
}
inline const ::std::string& Close::number() const {
  // @@protoc_insertion_point(field_get:tutorial.Close.number)
  return number_.GetNoArena();
}
inline void Close::set_number(const ::std::string& value) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Close.number)
}
#if LANG_CXX11
inline void Close::set_number(::std::string&& value) {
  set_has_number();
  number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tutorial.Close.number)
}
#endif
inline void Close::set_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Close.number)
}
inline void Close::set_number(const char* value, size_t size) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Close.number)
}
inline ::std::string* Close::mutable_number() {
  set_has_number();
  // @@protoc_insertion_point(field_mutable:tutorial.Close.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Close::release_number() {
  // @@protoc_insertion_point(field_release:tutorial.Close.number)
  if (!has_number()) {
    return NULL;
  }
  clear_has_number();
  return number_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Close::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    set_has_number();
  } else {
    clear_has_number();
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Close.number)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tutorial::Data_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tutorial::Data_DataType>() {
  return ::tutorial::Data_DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_my_5fmessage_2eproto
